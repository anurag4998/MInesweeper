{"version":3,"sources":["home.js","square.js","structure.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","levels","rows","columns","mines","className","to","pathname","state","Square","useState","showNumber","setShowNumber","showMine","setShowMine","showFlag","setShowFlag","useEffect","square","isMine","isRevealed","onClick","open","undefined","e","handleLoss","number_of_minesAround","click","id","countOpened","onContextMenu","preventDefault","board","Structure","location","generatedBoard","setGeneratedBoard","resetGame","setresetGame","won","setWon","ResetBoard","length","_id","i","push","Array","j","k","a","Math","floor","random","b","createBoard","RevealAll","handleRecursiveOpen","swal","zeroMines","map","x","filter","y","revealed","index","toString","setTimeout","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ae016b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Home = (props) => {\r\n    let levels = [{rows:10, columns:8, mines:10}, {rows:14, columns:18 , mines:20} , {rows:20, columns:24 , mines:99}];\r\n   \r\n    return(\r\n        <div className = 'container'>\r\n            <h1 className = 'heading'> Minesweeper </h1>\r\n            <h1 className = 'subheading'> Select level </h1>\r\n\r\n            <div className = 'levels'>\r\n                <Link to= {{ pathname: \"/game\",  state: { levels: levels[0] } }} className = 'level-select' >Easy</Link>\r\n                <Link to= {{ pathname: \"/game\",  state: { levels: levels[1] } }} className = 'level-select' >Medium</Link>\r\n                <Link to= {{ pathname: \"/game\",  state: { levels: levels[2] } }} className = 'level-select' >Hard</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { GiGolfFlag,GiStarProminences } from \"react-icons/gi\";\r\n\r\nconst Square = (props) => {\r\n   \r\n    const [showNumber,setShowNumber] = useState(0)\r\n    const [showMine, setShowMine] = useState(0)\r\n    const [showFlag, setShowFlag] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setShowNumber(0)\r\n        setShowMine(0)\r\n        setShowFlag(0)\r\n    },[props.square])\r\n    \r\n    const handleRightClick = (e) => {\r\n        e.preventDefault();\r\n        if(showNumber || showMine || (!props.square.isMine && props.square.isRevealed)) return;\r\n        showFlag ? setShowFlag(0) : setShowFlag(1)        \r\n    }\r\n    \r\n   \r\n    const handleOpen = (e) => {\r\n    \r\n        if(showFlag|| props.square.isRevealed) return;\r\n        if(props.square.isMine === true)\r\n            {\r\n                setShowMine(1)\r\n                props.handleLoss()\r\n                return;\r\n            } \r\n        if(props.square.number_of_minesAround === 0)\r\n        {\r\n            props.click(props.square.id)\r\n        }\r\n        if(showFlag || showMine)  return;\r\n        setShowNumber(1)\r\n        props.square.isRevealed = true;\r\n        props.countOpened()\r\n    }\r\n\r\n   \r\n    return(\r\n        <Fragment>\r\n            <div className = {(showNumber || showMine || showFlag || (!props.square.isMine && props.square.isRevealed)) ? 'open' :'closed'} onClick = { showNumber||showMine||props.open? undefined :  handleOpen} onContextMenu = {handleRightClick}>\r\n                { !props.square.isMine &&   ( showNumber || props.square.isRevealed  )? props.square.number_of_minesAround === 0 ? \"\" : props.square.number_of_minesAround : undefined}\r\n                {showMine || (props.square.isRevealed  && props.square.isMine )? <GiStarProminences/> : undefined}\r\n                {showFlag && !(props.square.isRevealed)? <GiGolfFlag/> : \"\"}\r\n\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Square","import React, { useState,useEffect, Fragment } from 'react';\r\nimport swal from 'sweetalert';\r\n\r\nimport Square from './square'\r\n\r\n\r\nclass square  {\r\n  isMine = false\r\n  number_of_minesAround = 0\r\n  id = 0\r\n  isRevealed = false\r\n}\r\nlet board = []\r\n\r\nconst Structure = (props) => {\r\n    let rows = props.location.state.levels.rows;\r\n    let columns = props.location.state.levels.columns;;\r\n    let mines = props.location.state.levels.mines;;\r\n    let [generatedBoard, setGeneratedBoard] = useState([])\r\n    let [resetGame, setresetGame] = useState(0)\r\n    let [won, setWon] = useState(false)\r\n\r\n   \r\n\r\n    useEffect( () => {      \r\n      setGeneratedBoard(ResetBoard)\r\n    },[]); // eslint-disable-line react-hooks/exhaustive-deps\r\n \r\n   \r\n////////////////////////////////////////////////////////////////////////////\r\n    //1. Generate Board\r\n    function createBoard()\r\n    {\r\n   \r\n          let _id = 0\r\n          for(let i=0; i < rows; i++)\r\n          {\r\n              board.push([]);\r\n      \r\n              board[i].push( new Array(columns));\r\n      \r\n              for(let j=0; j < columns; j++){\r\n              board[i][j] = new square();\r\n              board[i][j].id = _id++\r\n              }\r\n          }\r\n          \r\n      \r\n      //2.Generate Mines\r\n        for(let k = 0 ; k< mines ;k++)\r\n        {\r\n    \r\n            let a = Math.floor(Math.random() * (rows)) \r\n            let b = Math.floor(Math.random() * (columns));\r\n            if(board[a][b].isMine === true )\r\n              {\r\n                k--\r\n              }\r\n            else{\r\n                board[a][b].isMine = true\r\n            }\r\n    \r\n        }\r\n    \r\n      //3.generate numbers\r\n      for(let i = 0; i< rows ; i++)\r\n      {\r\n          for(let j = 0; j<columns ;j++)\r\n          {\r\n              if(board[i][j].isMine === true)\r\n                  {\r\n                  if((i+1) <=( rows - 1))\r\n                  {\r\n                      board[i+1][j].number_of_minesAround++;\r\n  \r\n                  }\r\n                  if( (i-1) >=0 )\r\n                  {\r\n                      board[i-1][j].number_of_minesAround++;\r\n  \r\n                  }\r\n                      \r\n                      if( (j + 1) <= (columns-1))\r\n                      {\r\n                          board[i][j+1].number_of_minesAround++;\r\n  \r\n                      }\r\n                      if((j - 1) >= 0)\r\n                      {\r\n                          board[i][j-1].number_of_minesAround++;\r\n  \r\n                      }\r\n                      //////////////////////////////////////////////////////////////////////////////\r\n                      if((i-1) >= 0 && (j-1) >=0 )\r\n                      {\r\n                          board[i-1][j-1].number_of_minesAround++;  \r\n  \r\n                      }\r\n  \r\n                      if((i-1) >=0 && (j+1) <=columns-1 )\r\n                      {\r\n                          board[i-1][j+1].number_of_minesAround++; \r\n                      }\r\n                      \r\n                      \r\n                      if((i+1) <=(rows-1)  && (j-1) >=0 )\r\n                      {\r\n                          board[i+1][j-1].number_of_minesAround++; \r\n  \r\n                      }\r\n                      \r\n                      if((i+1) <= (rows-1) && (j+ 1) <= (columns -1))\r\n                      {\r\n                          board[i+1][j+1].number_of_minesAround++; \r\n  \r\n                      }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //////////////////////////////////////////////////////////////\r\n      //4.Return the board\r\n      function ResetBoard()\r\n      {\r\n          board.length = 0\r\n          createBoard()\r\n          return board;\r\n      }\r\n      //5.Reveal all squares\r\n      function RevealAll()\r\n      {\r\n        for(let i = 0; i< rows ; i++)\r\n        {\r\n            for(let j = 0; j<columns ;j++)\r\n            {\r\n              board[i][j].isRevealed = true\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////\r\n    //6.Open squares recursively\r\n     function handleRecursiveOpen(id) {\r\n\r\n      if(id < 0 || id >rows*columns-1) return;\r\n      let i = Math.floor( (id)/columns) ;\r\n      let j = (id) % columns;\r\n      if(board[i][j].isMine === false ) \r\n          board[i][j].isRevealed = true;\r\n\r\n          if((i+1) <=( rows - 1))\r\n              {\r\n                  if(board[i+1][j].isMine === false && board[i+1][j].isRevealed !== true)\r\n                      {\r\n                          if(board[i][j].number_of_minesAround === 0)\r\n                              handleRecursiveOpen(id+columns)\r\n                      }\r\n              }\r\n  \r\n              if((i-1) >=0)\r\n              {\r\n                  if(board[i-1][j].isMine === false && board[i-1][j].isRevealed !== true)\r\n                      {\r\n                          //console.log('left')\r\n                          if(board[i][j].number_of_minesAround === 0)\r\n                              handleRecursiveOpen(id-columns)\r\n                      }\r\n              }\r\n  \r\n              if( (j + 1) <= (columns-1))\r\n              {\r\n                 if( board[i][j+1].isMine === false && board[i][j+1].isRevealed !== true)\r\n                  {\r\n                      //console.log('bottom')\r\n                      if(board[i][j].number_of_minesAround === 0)\r\n                          handleRecursiveOpen(id+1)\r\n  \r\n                  }\r\n              }\r\n              if((j - 1) >= 0)\r\n              {\r\n                  if( board[i][j-1].isMine === false && board[i][j-1].isRevealed !== true)\r\n                  {\r\n                      //console.log('top')\r\n                      if(board[i][j].number_of_minesAround === 0)\r\n                              handleRecursiveOpen(id-1)\r\n  \r\n                  }\r\n              }\r\n        return board;\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    const handleLoss = () => {\r\n      \r\n      setGeneratedBoard([...RevealAll()]);\r\n      setresetGame(1)\r\n      swal(\"Game Over!\", \"You stepped on a mine\", \"error\");\r\n    }\r\n\r\n    const handleReset = () => {\r\n\r\n      setGeneratedBoard([...ResetBoard()]);\r\n      swal(\"Resetting your board\");\r\n      setTimeout(() => {\r\n        swal(\"Done\",\"Your Board is ready\", \"success\");\r\n        setWon(false);\r\n        setresetGame(0)\r\n\r\n      },500) \r\n     \r\n    }\r\n    //this works\r\n    const zeroMines = (id) => {\r\n       \r\n        setGeneratedBoard([...handleRecursiveOpen(id)])\r\n       \r\n    }\r\n    \r\n    const countOpened = () => {\r\n      let a = generatedBoard.map( x =>  {\r\n        return(\r\n            x.filter(y => y.isRevealed === true)\r\n        )\r\n    })\r\n      let revealed = 0;\r\n      a.map(x => {return(\r\n          revealed = revealed + x.length\r\n      )})\r\n      \r\n      if(revealed === ( rows*columns - mines))\r\n         {\r\n            setWon(true)\r\n            swal(\"You Won!\", \"You found all mines!\", \"success\");\r\n            setGeneratedBoard([...RevealAll()]);\r\n         } \r\n          \r\n    }\r\n    return(\r\n      <Fragment>\r\n       \r\n        <div className = 'container'>\r\n            <h1 className = 'heading'> Minesweeper </h1>\r\n            <div className = 'grid'>\r\n              {generatedBoard.map((x,index) => {\r\n                return( \r\n                  <div className = 'row' key = {index}>\r\n                      {x.map( y => {\r\n                        return(\r\n                              <div key = {y.id.toString()} className = 'square' >\r\n                                <Square square = {y}  click = {zeroMines} handleLoss = {handleLoss} countOpened = {countOpened} ></Square>\r\n                              </div>\r\n                            )\r\n                        }\r\n                      )}\r\n                  </div>\r\n                )})}\r\n            </div>\r\n            \r\n               <div className = 'row buttonholder'>\r\n               {\r\n                resetGame || won ?  <button className = 'resetbtn' onClick= {handleReset} >Reset</button> : undefined\r\n               }\r\n              </div>\r\n        </div>\r\n      </Fragment>\r\n    ) \r\n}\r\n\r\nexport default Structure","import './App.css';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from './home'\nimport Structure from './structure'\nfunction App() { \n  \n  return (\n\n    <BrowserRouter>\n      <Switch>\n        <Route exact path = \"/\" component = {Home} />\n        <Route path = \"/game\" component = {Structure} />\n\n      </Switch>\n    </BrowserRouter>       \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}