{"version":3,"sources":["square.js","structure.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","useState","showNumber","setShowNumber","showMine","setShowMine","showFlag","setShowFlag","useEffect","square","className","isMine","isRevealed","onClick","open","undefined","e","handleLoss","number_of_minesAround","click","id","countOpened","onContextMenu","preventDefault","board","Structure","rows","columns","mines","generatedBoard","setGeneratedBoard","updated","setUpdated","resetGame","setresetGame","won","setWon","ResetBoard","length","_id","i","push","Array","j","k","a","Math","floor","random","b","createBoard","handleRecursiveOpen","console","log","RevealAll","swal","zeroMines","map","x","filter","y","revealed","index","toString","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eddff5fe.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\r\nimport { GiGolfFlag,GiStarProminences } from \"react-icons/gi\";\r\n\r\nconst Square = (props) => {\r\n   \r\n    const [showNumber,setShowNumber] = useState(0)\r\n    const [showMine, setShowMine] = useState(0)\r\n    const [showFlag, setShowFlag] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setShowNumber(0)\r\n        setShowMine(0)\r\n        setShowFlag(0)\r\n    },[props.square])\r\n    \r\n    const handleRightClick = (e) => {\r\n        e.preventDefault();\r\n        if(showNumber || showMine || (!props.square.isMine && props.square.isRevealed)) return;\r\n        showFlag ? setShowFlag(0) : setShowFlag(1)        \r\n    }\r\n    \r\n   \r\n    const handleOpen = (e) => {\r\n    \r\n        if(showFlag) return\r\n        if(props.square.isMine === true)\r\n            {\r\n                setShowMine(1)\r\n                props.handleLoss()\r\n                return;\r\n            } \r\n        if(props.square.number_of_minesAround === 0)\r\n        {\r\n            props.click(props.square.id)\r\n        }\r\n        if(showFlag || showMine)  return;\r\n        setShowNumber(1)\r\n        props.square.isRevealed = true;\r\n        props.countOpened()\r\n    }\r\n\r\n   \r\n    return(\r\n        <Fragment>\r\n            <div className = {(showNumber || showMine || showFlag || (!props.square.isMine && props.square.isRevealed)) ? 'open' :'closed'} onClick = { showNumber||showMine||props.open? undefined :  handleOpen} onContextMenu = {handleRightClick}>\r\n                { !props.square.isMine &&   ( showNumber || props.square.isRevealed  )? props.square.number_of_minesAround === 0 ? \"\" : props.square.number_of_minesAround : undefined}\r\n                {showMine || (props.square.isRevealed  && props.square.isMine )? <GiStarProminences/> : undefined}\r\n                {showFlag && !(props.square.isRevealed)? <GiGolfFlag/> : \"\"}\r\n\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Square","import React, { useState,useEffect, Fragment } from 'react';\r\nimport swal from 'sweetalert';\r\n\r\nimport Square from './square'\r\n\r\n\r\nclass square  {\r\n  isMine = false\r\n  number_of_minesAround = 0\r\n  id = 0\r\n  isRevealed = false\r\n}\r\nlet board = []\r\n\r\nconst Structure = ({rows,columns,mines}) => {\r\n\r\n    let [generatedBoard, setGeneratedBoard] = useState([])\r\n    let [updated,setUpdated] = useState(1)\r\n    let [resetGame, setresetGame] = useState(0)\r\n    let [won, setWon] = useState(false)\r\n\r\n    //call effect when update value changes\r\n    // useEffect(() => {\r\n        \r\n    //     setGeneratedBoard(board)\r\n    //     console.log('in second effect')\r\n\r\n    // },[updated])\r\n\r\n    useEffect( () => {\r\n        setGeneratedBoard(ResetBoard)\r\n        console.log('in effect')\r\n    },[]); // eslint-disable-line react-hooks/exhaustive-deps\r\n \r\n   \r\n////////////////////////////////////////////////////////////////////////////\r\n    //1. Generate Board\r\n    function createBoard()\r\n    {\r\n   \r\n          let _id = 0\r\n          for(let i=0; i < rows; i++)\r\n          {\r\n              board.push([]);\r\n      \r\n              board[i].push( new Array(columns));\r\n      \r\n              for(let j=0; j < columns; j++){\r\n              board[i][j] = new square();\r\n              board[i][j].id = _id++\r\n              }\r\n          }\r\n          \r\n      \r\n      //2.Generate Mines\r\n        for(let k = 0 ; k< mines ;k++)\r\n        {\r\n    \r\n            let a = Math.floor(Math.random() * (rows)) \r\n            let b = Math.floor(Math.random() * (columns));\r\n            if(board[a][b].isMine === true )\r\n              {\r\n                k--\r\n              }\r\n            else{\r\n                board[a][b].isMine = true\r\n            }\r\n    \r\n        }\r\n    \r\n      //3.generate numbers\r\n      for(let i = 0; i< rows ; i++)\r\n      {\r\n          for(let j = 0; j<columns ;j++)\r\n          {\r\n              if(board[i][j].isMine === true)\r\n                  {\r\n                  if((i+1) <=( rows - 1))\r\n                  {\r\n                      board[i+1][j].number_of_minesAround++;\r\n  \r\n                  }\r\n                  if( (i-1) >=0 )\r\n                  {\r\n                      board[i-1][j].number_of_minesAround++;\r\n  \r\n                  }\r\n                      \r\n                      if( (j + 1) <= (columns-1))\r\n                      {\r\n                          board[i][j+1].number_of_minesAround++;\r\n  \r\n                      }\r\n                      if((j - 1) >= 0)\r\n                      {\r\n                          board[i][j-1].number_of_minesAround++;\r\n  \r\n                      }\r\n                      //////////////////////////////////////////////////////////////////////////////\r\n                      if((i-1) >= 0 && (j-1) >=0 )\r\n                      {\r\n                          board[i-1][j-1].number_of_minesAround++;  \r\n  \r\n                      }\r\n  \r\n                      if((i-1) >=0 && (j+1) <=columns-1 )\r\n                      {\r\n                          board[i-1][j+1].number_of_minesAround++; \r\n                      }\r\n                      \r\n                      \r\n                      if((i+1) <=(rows-1)  && (j-1) >=0 )\r\n                      {\r\n                          board[i+1][j-1].number_of_minesAround++; \r\n  \r\n                      }\r\n                      \r\n                      if((i+1) <= (rows-1) && (j+ 1) <= (columns -1))\r\n                      {\r\n                          board[i+1][j+1].number_of_minesAround++; \r\n  \r\n                      }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //////////////////////////////////////////////////////////////\r\n      //4.Return the board\r\n      function ResetBoard()\r\n      {\r\n          board.length = 0\r\n          createBoard()\r\n          return board;\r\n      }\r\n      //5.Reveal all squares\r\n      function RevealAll()\r\n      {\r\n        for(let i = 0; i< rows ; i++)\r\n        {\r\n            for(let j = 0; j<columns ;j++)\r\n            {\r\n              board[i][j].isRevealed = true\r\n            }\r\n        }\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////\r\n    //6.Open squares recursively\r\n     function handleRecursiveOpen(id) {\r\n\r\n      if(id < 0 || id >rows*columns-1) return;\r\n       //console.log(id)\r\n      let i = Math.floor( (id)/columns) ;\r\n      let j = (id) % columns;\r\n      if(board[i][j].isMine === false ) \r\n          board[i][j].isRevealed = true;\r\n\r\n      // console.log(i,j)\r\n          if((i+1) <=( rows - 1))\r\n              {\r\n                  if(board[i+1][j].isMine === false && board[i+1][j].isRevealed !== true)\r\n                      {\r\n                          if(board[i][j].number_of_minesAround === 0)\r\n                              handleRecursiveOpen(id+columns)\r\n                      }\r\n              }\r\n  \r\n              if((i-1) >=0)\r\n              {\r\n                  if(board[i-1][j].isMine === false && board[i-1][j].isRevealed !== true)\r\n                      {\r\n                          //console.log('left')\r\n                          if(board[i][j].number_of_minesAround === 0)\r\n                              handleRecursiveOpen(id-columns)\r\n                      }\r\n              }\r\n  \r\n              if( (j + 1) <= (columns-1))\r\n              {\r\n                 if( board[i][j+1].isMine === false && board[i][j+1].isRevealed !== true)\r\n                  {\r\n                      //console.log('bottom')\r\n                      if(board[i][j].number_of_minesAround === 0)\r\n                          handleRecursiveOpen(id+1)\r\n  \r\n                  }\r\n              }\r\n              if((j - 1) >= 0)\r\n              {\r\n                  if( board[i][j-1].isMine === false && board[i][j-1].isRevealed !== true)\r\n                  {\r\n                      //console.log('top')\r\n                      if(board[i][j].number_of_minesAround === 0)\r\n                              handleRecursiveOpen(id-1)\r\n  \r\n                  }\r\n              }\r\n        return board;\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    const handleLoss = () => {\r\n      RevealAll();\r\n      setresetGame(1)\r\n      swal(\"Game Over!\", \"You stepped on a mine\", \"error\");\r\n    }\r\n\r\n    const handleReset = () => {\r\n\r\n      ResetBoard()\r\n      swal(\"Resetting your board\");\r\n      setTimeout(() => {\r\n        swal(\"Done\",\"Your Board is ready\", \"success\");\r\n        setWon(false);\r\n        setresetGame(0)\r\n\r\n      },500) \r\n     \r\n    }\r\n    //this works\r\n    const zeroMines = (id) => {\r\n       \r\n        setGeneratedBoard( handleRecursiveOpen(id))\r\n        setUpdated(!updated);\r\n       \r\n    }\r\n    //  This does not work\r\n    // const zeroMines = (id) => {\r\n       \r\n    //     setGeneratedBoard( handleRecursiveOpen(id));\r\n    //    \r\n       \r\n    // }\r\n\r\n    // Why I included the update variable\r\n     // const zeroMines = (id) => {\r\n     //  \r\n     //       handleRecursiveOpen(id);\r\n     //        setUpdated(!updated);\r\n     //    \r\n    // }\r\n    const countOpened = () => {\r\n      let a = generatedBoard.map( x =>  {\r\n        return(\r\n            x.filter(y => y.isRevealed === true)\r\n        )\r\n    })\r\n      let revealed = 0;\r\n      a.map(x => {return(\r\n          revealed = revealed + x.length\r\n      )})\r\n      \r\n      if(revealed === ( rows*columns - mines))\r\n         {\r\n            setWon(true)\r\n            swal(\"You Won!\", \"You found all mines!\", \"success\");\r\n         } \r\n          \r\n    }\r\n    return(\r\n      <Fragment>\r\n       \r\n        <div className = 'container'>\r\n            <h1 className = 'heading'> Minesweeper </h1>\r\n            <div className = 'grid'>\r\n              {generatedBoard.map((x,index) => {\r\n                return( \r\n                  <div className = 'row' key = {index}>\r\n                      {x.map( y => {\r\n                        return(\r\n                              <div key = {y.id.toString()} className = 'square' >\r\n                                <Square square = {y}  click = {zeroMines} handleLoss = {handleLoss} countOpened = {countOpened} ></Square>\r\n                              </div>\r\n                            )\r\n                        }\r\n                      )}\r\n                  </div>\r\n                )})}\r\n            </div>\r\n            \r\n               <div className = 'row buttonholder'>\r\n               {\r\n                resetGame || won ?  <button className = 'resetbtn' onClick= {handleReset} >Reset</button> : undefined\r\n               }\r\n              </div>\r\n        </div>\r\n      </Fragment>\r\n    ) \r\n}\r\n\r\nexport default Structure","import './App.css';\nimport Structure from './structure'\n\nfunction App() {\n \n  return (\n    <div className=\"App\">\n        <Structure rows = {14} columns = {10} mines = {10}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}